{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/form-field\";\nimport * as i3 from \"@angular/material/input\";\nimport * as i4 from \"@angular/material/autocomplete\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/core\";\n\nfunction DzmtAutocompleteDisplayComponent_mat_option_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r2.name, \" \");\n  }\n}\n\nexport class DzmtAutocompleteDisplayComponent {\n  constructor() {\n    this.myControl = new FormControl();\n    this.options = [{\n      name: 'Mary'\n    }, {\n      name: 'Shelley'\n    }, {\n      name: 'Igor'\n    }];\n  }\n\n  ngOnInit() {\n    this.filteredOptions = this.myControl.valueChanges.pipe(startWith(''), map(value => typeof value === 'string' ? value : value.name), map(name => name ? this._filter(name) : this.options.slice()));\n  }\n\n  displayFn(user) {\n    return user && user.name ? user.name : '';\n  }\n\n  _filter(name) {\n    const filterValue = name.toLowerCase();\n    return this.options.filter(option => option.name.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n}\n\nDzmtAutocompleteDisplayComponent.ɵfac = function DzmtAutocompleteDisplayComponent_Factory(t) {\n  return new (t || DzmtAutocompleteDisplayComponent)();\n};\n\nDzmtAutocompleteDisplayComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DzmtAutocompleteDisplayComponent,\n  selectors: [[\"app-dzmt-autocomplete-display\"]],\n  decls: 9,\n  vars: 6,\n  consts: [[1, \"example-form\"], [1, \"example-full-width\"], [\"type\", \"text\", \"matInput\", \"\", 3, \"formControl\", \"matAutocomplete\"], [3, \"displayWith\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n  template: function DzmtAutocompleteDisplayComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵelementStart(1, \"mat-form-field\", 1);\n      i0.ɵɵelementStart(2, \"mat-label\");\n      i0.ɵɵtext(3, \"Assignee\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 2);\n      i0.ɵɵelementStart(5, \"mat-autocomplete\", 3, 4);\n      i0.ɵɵtemplate(7, DzmtAutocompleteDisplayComponent_mat_option_7_Template, 2, 2, \"mat-option\", 5);\n      i0.ɵɵpipe(8, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(6);\n\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formControl\", ctx.myControl)(\"matAutocomplete\", _r0);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"displayWith\", ctx.displayFn);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(8, 4, ctx.filteredOptions));\n    }\n  },\n  directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.NgForm, i2.MatFormField, i2.MatLabel, i3.MatInput, i1.DefaultValueAccessor, i4.MatAutocompleteTrigger, i1.NgControlStatus, i1.FormControlDirective, i4.MatAutocomplete, i5.NgForOf, i6.MatOption],\n  pipes: [i5.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJkem10LWF1dG9jb21wbGV0ZS1kaXNwbGF5LmNvbXBvbmVudC5jc3MifQ== */\"]\n});","map":{"version":3,"sources":["D:\\Learning\\Graduation Project\\Graduation Project 2\\Angular-Zenix-v1.0_15_September_2021\\package\\src\\app\\material\\dzmt-autocomplete\\dzmt-autocomplete-display\\dzmt-autocomplete-display.component.ts","D:\\Learning\\Graduation Project\\Graduation Project 2\\Angular-Zenix-v1.0_15_September_2021\\package\\src\\app\\material\\dzmt-autocomplete\\dzmt-autocomplete-display\\dzmt-autocomplete-display.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nexport interface User {\n  name: string;\n}\n\n\n@Component({\n  selector: 'app-dzmt-autocomplete-display',\n  templateUrl: './dzmt-autocomplete-display.component.html',\n  styleUrls: ['./dzmt-autocomplete-display.component.css']\n})\nexport class DzmtAutocompleteDisplayComponent implements OnInit {\n\n  constructor() { }\n\n  myControl = new FormControl();\n  options: User[] = [\n    {name: 'Mary'},\n    {name: 'Shelley'},\n    {name: 'Igor'}\n  ];\n  filteredOptions!: Observable<User[]>;\n\n  ngOnInit() {\n    this.filteredOptions = this.myControl.valueChanges\n      .pipe(\n        startWith(''),\n        map(value => typeof value === 'string' ? value : value.name),\n        map(name => name ? this._filter(name) : this.options.slice())\n      );\n  }\n\n  displayFn(user: User): string {\n    return user && user.name ? user.name : '';\n  }\n\n  private _filter(name: string): User[] {\n    const filterValue = name.toLowerCase();\n\n    return this.options.filter(option => option.name.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n}\n","<form class=\"example-form\">\n  <mat-form-field class=\"example-full-width\">\n    <mat-label>Assignee</mat-label>\n    <input type=\"text\" matInput [formControl]=\"myControl\" [matAutocomplete]=\"auto\">\n    <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n      <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n        {{option.name}}\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n</form>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}