{"ast":null,"code":"import { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { FormControl } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/form-field\";\nimport * as i2 from \"@angular/material/chips\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/autocomplete\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/core\";\nconst _c0 = [\"fruitInput\"];\nconst _c1 = [\"auto\"];\n\nfunction ChipsAutocompleteComponent_mat_chip_5_mat_icon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 11);\n    i0.ɵɵtext(1, \"cancel\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ChipsAutocompleteComponent_mat_chip_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-chip\", 9);\n    i0.ɵɵlistener(\"removed\", function ChipsAutocompleteComponent_mat_chip_5_Template_mat_chip_removed_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const fruit_r5 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.remove(fruit_r5);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, ChipsAutocompleteComponent_mat_chip_5_mat_icon_2_Template, 2, 0, \"mat-icon\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const fruit_r5 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"selectable\", ctx_r1.selectable)(\"removable\", ctx_r1.removable);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", fruit_r5, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.removable);\n  }\n}\n\nfunction ChipsAutocompleteComponent_mat_option_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const fruit_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", fruit_r9);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", fruit_r9, \" \");\n  }\n}\n\nexport class ChipsAutocompleteComponent {\n  constructor() {\n    this.visible = true;\n    this.selectable = true;\n    this.removable = true;\n    this.separatorKeysCodes = [ENTER, COMMA];\n    this.fruitCtrl = new FormControl();\n    this.fruits = ['Lemon'];\n    this.allFruits = ['Apple', 'Lemon', 'Lime', 'Orange', 'Strawberry'];\n    this.filteredFruits = this.fruitCtrl.valueChanges.pipe(startWith(null), map(fruit => fruit ? this._filter(fruit) : this.allFruits.slice()));\n  }\n\n  ngOnInit() {}\n\n  add(event) {\n    const input = event.input;\n    const value = event.value; // Add our fruit\n\n    if ((value || '').trim()) {\n      this.fruits.push(value.trim());\n    } // Reset the input value\n\n\n    if (input) {\n      input.value = '';\n    }\n\n    this.fruitCtrl.setValue(null);\n  }\n\n  remove(fruit) {\n    const index = this.fruits.indexOf(fruit);\n\n    if (index >= 0) {\n      this.fruits.splice(index, 1);\n    }\n  }\n\n  selected(event) {\n    this.fruits.push(event.option.viewValue);\n    this.fruitInput.nativeElement.value = '';\n    this.fruitCtrl.setValue(null);\n  }\n\n  _filter(value) {\n    const filterValue = value.toLowerCase();\n    return this.allFruits.filter(fruit => fruit.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n}\n\nChipsAutocompleteComponent.ɵfac = function ChipsAutocompleteComponent_Factory(t) {\n  return new (t || ChipsAutocompleteComponent)();\n};\n\nChipsAutocompleteComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChipsAutocompleteComponent,\n  selectors: [[\"app-chips-autocomplete\"]],\n  viewQuery: function ChipsAutocompleteComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fruitInput = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matAutocomplete = _t.first);\n    }\n  },\n  decls: 12,\n  vars: 8,\n  consts: [[1, \"example-chip-list\"], [\"aria-label\", \"Fruit selection\"], [\"chipList\", \"\"], [3, \"selectable\", \"removable\", \"removed\", 4, \"ngFor\", \"ngForOf\"], [\"placeholder\", \"New fruit...\", 3, \"formControl\", \"matAutocomplete\", \"matChipInputFor\", \"matChipInputSeparatorKeyCodes\", \"matChipInputTokenEnd\"], [\"fruitInput\", \"\"], [3, \"optionSelected\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"selectable\", \"removable\", \"removed\"], [\"matChipRemove\", \"\", 4, \"ngIf\"], [\"matChipRemove\", \"\"], [3, \"value\"]],\n  template: function ChipsAutocompleteComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-form-field\", 0);\n      i0.ɵɵelementStart(1, \"mat-label\");\n      i0.ɵɵtext(2, \"Favorite Fruits\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"mat-chip-list\", 1, 2);\n      i0.ɵɵtemplate(5, ChipsAutocompleteComponent_mat_chip_5_Template, 3, 4, \"mat-chip\", 3);\n      i0.ɵɵelementStart(6, \"input\", 4, 5);\n      i0.ɵɵlistener(\"matChipInputTokenEnd\", function ChipsAutocompleteComponent_Template_input_matChipInputTokenEnd_6_listener($event) {\n        return ctx.add($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"mat-autocomplete\", 6, 7);\n      i0.ɵɵlistener(\"optionSelected\", function ChipsAutocompleteComponent_Template_mat_autocomplete_optionSelected_8_listener($event) {\n        return ctx.selected($event);\n      });\n      i0.ɵɵtemplate(10, ChipsAutocompleteComponent_mat_option_10_Template, 2, 2, \"mat-option\", 8);\n      i0.ɵɵpipe(11, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(4);\n\n      const _r3 = i0.ɵɵreference(9);\n\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", ctx.fruits);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formControl\", ctx.fruitCtrl)(\"matAutocomplete\", _r3)(\"matChipInputFor\", _r0)(\"matChipInputSeparatorKeyCodes\", ctx.separatorKeysCodes);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(11, 6, ctx.filteredFruits));\n    }\n  },\n  directives: [i1.MatFormField, i1.MatLabel, i2.MatChipList, i3.NgForOf, i4.DefaultValueAccessor, i5.MatAutocompleteTrigger, i2.MatChipInput, i4.NgControlStatus, i4.FormControlDirective, i5.MatAutocomplete, i2.MatChip, i3.NgIf, i6.MatIcon, i2.MatChipRemove, i7.MatOption],\n  pipes: [i3.AsyncPipe],\n  styles: [\".example-chip-list[_ngcontent-%COMP%] {\\r\\n  width: 100%;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoaXBzLWF1dG9jb21wbGV0ZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBVztBQUNiIiwiZmlsZSI6ImNoaXBzLWF1dG9jb21wbGV0ZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmV4YW1wbGUtY2hpcC1saXN0IHtcclxuICB3aWR0aDogMTAwJTtcclxufSJdfQ== */\"]\n});","map":{"version":3,"sources":["D:\\Learning\\Graduation Project\\Graduation Project 2\\Angular-Zenix-v1.0_15_September_2021\\package\\src\\app\\material\\dzmt-chips\\chips-autocomplete\\chips-autocomplete.component.ts","D:\\Learning\\Graduation Project\\Graduation Project 2\\Angular-Zenix-v1.0_15_September_2021\\package\\src\\app\\material\\dzmt-chips\\chips-autocomplete\\chips-autocomplete.component.html"],"names":[],"mappings":"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","sourcesContent":["import {COMMA, ENTER} from '@angular/cdk/keycodes';\nimport { Component, OnInit, ElementRef, ViewChild } from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {MatAutocompleteSelectedEvent, MatAutocomplete} from '@angular/material/autocomplete';\nimport {MatChipInputEvent} from '@angular/material/chips';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-chips-autocomplete',\n  templateUrl: './chips-autocomplete.component.html',\n  styleUrls: ['./chips-autocomplete.component.css']\n})\nexport class ChipsAutocompleteComponent implements OnInit {\n\n  ngOnInit(): void {\n  }\n  \n  visible = true;\n  selectable = true;\n  removable = true;\n  separatorKeysCodes: number[] = [ENTER, COMMA];\n  fruitCtrl = new FormControl();\n  filteredFruits: Observable<string[]>;\n  fruits: string[] = ['Lemon'];\n  allFruits: string[] = ['Apple', 'Lemon', 'Lime', 'Orange', 'Strawberry'];\n\n  @ViewChild('fruitInput') fruitInput!: ElementRef<HTMLInputElement>;\n  @ViewChild('auto') matAutocomplete!: MatAutocomplete;\n\n  constructor() {\n    this.filteredFruits = this.fruitCtrl.valueChanges.pipe(\n        startWith(null),\n        map((fruit: string | null) => fruit ? this._filter(fruit) : this.allFruits.slice()));\n  }\n\n  add(event: MatChipInputEvent): void {\n    const input = event.input;\n    const value = event.value;\n\n    // Add our fruit\n    if ((value || '').trim()) {\n      this.fruits.push(value.trim());\n    }\n\n    // Reset the input value\n    if (input) {\n      input.value = '';\n    }\n\n    this.fruitCtrl.setValue(null);\n  }\n\n  remove(fruit: string): void {\n    const index = this.fruits.indexOf(fruit);\n\n    if (index >= 0) {\n      this.fruits.splice(index, 1);\n    }\n  }\n\n  selected(event: MatAutocompleteSelectedEvent): void {\n    this.fruits.push(event.option.viewValue);\n    this.fruitInput.nativeElement.value = '';\n    this.fruitCtrl.setValue(null);\n  }\n\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n\n    return this.allFruits.filter(fruit => fruit.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n}\n","<mat-form-field class=\"example-chip-list\">\n    <mat-label>Favorite Fruits</mat-label>\n    <mat-chip-list #chipList aria-label=\"Fruit selection\">\n        <mat-chip\n        *ngFor=\"let fruit of fruits\"\n        [selectable]=\"selectable\"\n        [removable]=\"removable\"\n        (removed)=\"remove(fruit)\">\n            {{fruit}}\n            <mat-icon matChipRemove *ngIf=\"removable\">cancel</mat-icon>\n        </mat-chip>\n        <input\n        placeholder=\"New fruit...\"\n        #fruitInput\n        [formControl]=\"fruitCtrl\"\n        [matAutocomplete]=\"auto\"\n        [matChipInputFor]=\"chipList\"\n        [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n        (matChipInputTokenEnd)=\"add($event)\">\n    </mat-chip-list>\n    <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"selected($event)\">\n        <mat-option *ngFor=\"let fruit of filteredFruits | async\" [value]=\"fruit\">\n            {{fruit}}\n        </mat-option>\n    </mat-autocomplete>\n</mat-form-field>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}