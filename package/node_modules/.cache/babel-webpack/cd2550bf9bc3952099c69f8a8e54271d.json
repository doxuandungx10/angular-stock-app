{"ast":null,"code":"import { DecimalPipe } from '@angular/common';\nimport { FormControl } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n\nfunction TableFilteringComponent_tr_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelementStart(1, \"th\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵelement(4, \"img\", 7);\n    i0.ɵɵelement(5, \"ngb-highlight\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵelement(7, \"ngb-highlight\", 8);\n    i0.ɵɵpipe(8, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵelement(10, \"ngb-highlight\", 8);\n    i0.ɵɵpipe(11, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const country_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i_r2 + 1);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"src\", \"https://upload.wikimedia.org/wikipedia/commons/\" + country_r1.flag, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"result\", country_r1.name)(\"term\", ctx_r0.filter.value);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"result\", i0.ɵɵpipeBind1(8, 8, country_r1.area))(\"term\", ctx_r0.filter.value);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"result\", i0.ɵɵpipeBind1(11, 10, country_r1.population))(\"term\", ctx_r0.filter.value);\n  }\n}\n\nconst COUNTRIES = [{\n  name: 'Russia',\n  flag: 'f/f3/Flag_of_Russia.svg',\n  area: 17075200,\n  population: 146989754\n}, {\n  name: 'Canada',\n  flag: 'c/cf/Flag_of_Canada.svg',\n  area: 9976140,\n  population: 36624199\n}, {\n  name: 'United States',\n  flag: 'a/a4/Flag_of_the_United_States.svg',\n  area: 9629091,\n  population: 324459463\n}, {\n  name: 'China',\n  flag: 'f/fa/Flag_of_the_People%27s_Republic_of_China.svg',\n  area: 9596960,\n  population: 1409517397\n}];\n\nfunction search(text, pipe) {\n  return COUNTRIES.filter(country => {\n    const term = text.toLowerCase();\n    return country.name.toLowerCase().includes(term) || pipe.transform(country.area).includes(term) || pipe.transform(country.population).includes(term);\n  });\n}\n\nexport class TableFilteringComponent {\n  constructor(pipe) {\n    this.filter = new FormControl('');\n    this.countries$ = this.filter.valueChanges.pipe(startWith(''), map(text => search(text, pipe)));\n  }\n\n  ngOnInit() {}\n\n}\n\nTableFilteringComponent.ɵfac = function TableFilteringComponent_Factory(t) {\n  return new (t || TableFilteringComponent)(i0.ɵɵdirectiveInject(i1.DecimalPipe));\n};\n\nTableFilteringComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TableFilteringComponent,\n  selectors: [[\"app-table-filtering\"]],\n  features: [i0.ɵɵProvidersFeature([DecimalPipe])],\n  decls: 24,\n  vars: 4,\n  consts: [[1, \"form-group\", \"form-inline\"], [\"type\", \"text\", 1, \"form-control\", \"ml-2\", 3, \"formControl\"], [1, \"table-responsive\"], [1, \"table\", \"table-striped\"], [\"scope\", \"col\"], [4, \"ngFor\", \"ngForOf\"], [\"scope\", \"row\"], [1, \"mr-2\", 2, \"width\", \"20px\", 3, \"src\"], [3, \"result\", \"term\"]],\n  template: function TableFilteringComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"You can do filter table data, in this case with observables and our \");\n      i0.ɵɵelementStart(2, \"code\");\n      i0.ɵɵtext(3, \"NgbHighlight\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(4, \" component used in Typeahead\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"form\");\n      i0.ɵɵelementStart(6, \"div\", 0);\n      i0.ɵɵtext(7, \" Full text search: \");\n      i0.ɵɵelement(8, \"input\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 2);\n      i0.ɵɵelementStart(10, \"table\", 3);\n      i0.ɵɵelementStart(11, \"thead\");\n      i0.ɵɵelementStart(12, \"tr\");\n      i0.ɵɵelementStart(13, \"th\", 4);\n      i0.ɵɵtext(14, \"#\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"th\", 4);\n      i0.ɵɵtext(16, \"Country\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"th\", 4);\n      i0.ɵɵtext(18, \"Area\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"th\", 4);\n      i0.ɵɵtext(20, \"Population\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"tbody\");\n      i0.ɵɵtemplate(22, TableFilteringComponent_tr_22_Template, 12, 12, \"tr\", 5);\n      i0.ɵɵpipe(23, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"formControl\", ctx.filter);\n      i0.ɵɵadvance(14);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(23, 2, ctx.countries$));\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0YWJsZS1maWx0ZXJpbmcuY29tcG9uZW50LmNzcyJ9 */\"]\n});","map":{"version":3,"sources":["D:\\Learning\\Graduation Project\\Graduation Project 2\\Angular-Zenix-v1.0_15_September_2021\\package\\src\\app\\bootstrap\\table\\table-filtering\\table-filtering.component.ts","D:\\Learning\\Graduation Project\\Graduation Project 2\\Angular-Zenix-v1.0_15_September_2021\\package\\src\\app\\bootstrap\\table\\table-filtering\\table-filtering.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, PipeTransform } from '@angular/core';\nimport { DecimalPipe } from '@angular/common';\nimport { FormControl } from '@angular/forms';\n\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\n\ninterface Country {\n  name: string;\n  flag: string;\n  area: number;\n  population: number;\n}\n\nconst COUNTRIES: Country[] = [\n  {\n    name: 'Russia',\n    flag: 'f/f3/Flag_of_Russia.svg',\n    area: 17075200,\n    population: 146989754\n  },\n  {\n    name: 'Canada',\n    flag: 'c/cf/Flag_of_Canada.svg',\n    area: 9976140,\n    population: 36624199\n  },\n  {\n    name: 'United States',\n    flag: 'a/a4/Flag_of_the_United_States.svg',\n    area: 9629091,\n    population: 324459463\n  },\n  {\n    name: 'China',\n    flag: 'f/fa/Flag_of_the_People%27s_Republic_of_China.svg',\n    area: 9596960,\n    population: 1409517397\n  }\n];\n\nfunction search(text: string, pipe: PipeTransform): Country[] {\n  return COUNTRIES.filter(country => {\n    const term = text.toLowerCase();\n    return country.name.toLowerCase().includes(term)\n        || pipe.transform(country.area).includes(term)\n        || pipe.transform(country.population).includes(term);\n  });\n}\n\n\n@Component({\n  selector: 'app-table-filtering',\n  templateUrl: './table-filtering.component.html',\n  styleUrls: ['./table-filtering.component.css'],\n  providers: [DecimalPipe]\n})\nexport class TableFilteringComponent implements OnInit {\n\n  countries$: Observable<Country[]>;\n  filter = new FormControl('');\n\n  constructor(pipe: DecimalPipe) {\n    this.countries$ = this.filter.valueChanges.pipe(\n      startWith(''),\n      map(text => search(text, pipe))\n    );\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>You can do filter table data, in this case with observables and our <code>NgbHighlight</code> component used in Typeahead</p>\n\n<form>\n  <div class=\"form-group form-inline\">\n      Full text search: <input class=\"form-control ml-2\" type=\"text\" [formControl]=\"filter\"/>\n  </div>\n</form>\n<div class=\"table-responsive\">\n\t<table class=\"table table-striped\">\n\t  <thead>\n\t  <tr>\n\t\t<th scope=\"col\">#</th>\n\t\t<th scope=\"col\">Country</th>\n\t\t<th scope=\"col\">Area</th>\n\t\t<th scope=\"col\">Population</th>\n\t  </tr>\n\t  </thead>\n\t  <tbody>\n\t  <tr *ngFor=\"let country of countries$ | async; index as i\">\n\t\t<th scope=\"row\">{{ i + 1 }}</th>\n\t\t<td>\n\t\t  <img [src]=\"'https://upload.wikimedia.org/wikipedia/commons/' + country.flag\" class=\"mr-2\" style=\"width: 20px\">\n\t\t  <ngb-highlight [result]=\"country.name\" [term]=\"filter.value\"></ngb-highlight>\n\t\t</td>\n\t\t<td><ngb-highlight [result]=\"country.area | number\" [term]=\"filter.value\"></ngb-highlight></td>\n\t\t<td><ngb-highlight [result]=\"country.population | number\" [term]=\"filter.value\"></ngb-highlight></td>\n\t  </tr>\n\t  </tbody>\n\t</table>\n</div>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}